{"mappings":"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","sources":["src/js/catalog.js"],"sourcesContent":["import { trendMovieRequest } from './apikey.js';\nimport { upcomingMovieGenreRequest } from './apikey.js';\n\nconst dayTrend = document.querySelector('.catalog-js');\nconst paginationContainer = document.querySelector('.pagination-container');\nconst itemsPerPage = 20;\nlet currentPage = 1;\nlet trendData;\nlet genres;\n\nasync function initCatalogFetch() {\n  try {\n    genres = {};\n    trendData = await trendMovieRequest(currentPage);\n    const genresData = await upcomingMovieGenreRequest();\n\n    genresData.forEach(genre => {\n      genres[genre.id] = genre.name;\n    });\n\n    console.log(trendData.results);\n\n    renderCatalog(trendData.results, genres);\n\n    setupPagination();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction setupPagination() {\n  const totalPages = 25;\n  paginationContainer.innerHTML = '';\n\n  const maxVisiblePages = 5; // Максимальное количество видимых страниц, включая символ \"...\"\n  const halfVisiblePages = Math.floor(maxVisiblePages / 2);\n\n  let startPage = Math.max(currentPage - halfVisiblePages, 1);\n  let endPage = Math.min(startPage + maxVisiblePages - 1, totalPages);\n\n  if (endPage - startPage + 1 < maxVisiblePages) {\n    startPage = Math.max(endPage - maxVisiblePages + 1, 1);\n  }\n\n  if (currentPage > 1) {\n    addPrevPageLink(); // Добавляем стрелку \"<\" для перехода на предыдущую страницу\n  }\n\n  if (startPage > 1) {\n    addPageLink(1); // Добавляем ссылку на первую страницу\n    if (startPage > 2) {\n      addEllipsis(); // Добавляем символ \"...\" для скрытых страниц\n    }\n  }\n\n  for (let i = startPage; i <= endPage; i++) {\n    addPageLink(i); // Добавляем ссылки на видимые страницы\n  }\n\n  if (endPage < totalPages) {\n    if (endPage < totalPages - 1) {\n      addEllipsis(); // Добавляем символ \"...\" для скрытых страниц\n    }\n    addPageLink(totalPages); // Добавляем ссылку на последнюю страницу\n  }\n\n  if (currentPage < totalPages) {\n    addNextPageLink(); // Добавляем стрелку \">\" для перехода на следующую страницу\n  }\n}\n\nfunction addPageLink(pageNumber) {\n  const pageDiv = document.createElement('div');\n  pageDiv.classList.add('page-number');\n  const pageLink = document.createElement('a');\n  pageLink.classList = 'catalog-pagination-link';\n  pageLink.href = '#';\n  pageLink.textContent = formatPageNumber(pageNumber);\n\n  if (pageNumber === currentPage) {\n    pageLink.classList.add('active');\n    pageDiv.classList.add('active');\n  }\n\n  pageLink.addEventListener('click', async function () {\n    currentPage = pageNumber;\n    console.log(currentPage);\n    trendData = await trendMovieRequest(currentPage);\n    renderCatalog(trendData.results, genres);\n    setupPagination(trendData.total_pages);\n  });\n\n  pageDiv.appendChild(pageLink);\n  paginationContainer.appendChild(pageDiv);\n}\n\nfunction formatPageNumber(pageNumber) {\n  // Добавляем ведущий ноль, если номер страницы меньше 10\n  return pageNumber < 10 ? `0${pageNumber}` : pageNumber.toString();\n}\n\nfunction addEllipsis() {\n  const ellipsisSpan = document.createElement('span');\n  ellipsisSpan.textContent = '...';\n  paginationContainer.appendChild(ellipsisSpan);\n}\n\nfunction addPrevPageLink() {\n  const prevPageLink = document.createElement('a');\n  prevPageLink.href = '#';\n  prevPageLink.textContent = '<';\n  prevPageLink.addEventListener('click', async function () {\n    currentPage -= 1;\n    console.log(currentPage);\n    trendData = await trendMovieRequest(currentPage);\n    renderCatalog(trendData.results, genres);\n    setupPagination(trendData.total_pages);\n  });\n  paginationContainer.appendChild(prevPageLink);\n}\n\nfunction addNextPageLink() {\n  const nextPageLink = document.createElement('a');\n  nextPageLink.href = '#';\n  nextPageLink.textContent = '>';\n  nextPageLink.addEventListener('click', async function () {\n    currentPage += 1;\n    console.log(currentPage);\n    trendData = await trendMovieRequest(currentPage);\n    renderCatalog(trendData.results, genres);\n    setupPagination(trendData.total_pages);\n  });\n  paginationContainer.appendChild(nextPageLink);\n}\n\nfunction renderCatalog(arr, genres) {\n  dayTrend.innerHTML = ''; // Clear the container\n\n  const htmlMarkup = catalogTrendMarkup(arr, genres);\n  dayTrend.insertAdjacentHTML('beforeend', htmlMarkup);\n}\n\nfunction catalogTrendMarkup(arr, genres) {\n  return arr\n    .map(movie => {\n      const {\n        release_date,\n        backdrop_path,\n        genre_ids,\n        title,\n        vote_average,\n        name,\n        first_air_date,\n      } = movie;\n\n      const genreSlice = genre_ids.slice(0, 2);\n\n      const genreNames = genreSlice\n        .map(genreId => {\n          return genres[genreId];\n        })\n        .join(', ');\n\n      //с бэкэнда на некоторые фильмы приходит не title, а name\n      let filmName;\n      if (!title) {\n        filmName = name;\n      } else {\n        filmName = title;\n      }\n\n      let release;\n      if (!release_date) {\n        release = first_air_date;\n      } else {\n        release = release_date;\n      }\n\n      return `<div class=\"library-container-item\">\n                <div class=\"library-container-img\" style=\"background-image: url(https://image.tmdb.org/t/p/original${backdrop_path});\">\n                <div class=\"rating-libr rating-library\">\n                        <div class=\"rating-body\">\n                            <div class=\"rating-active\" style=\"width: ${convertRatingToPercentage(\n                              vote_average\n                            )}%;\"></div>\n                            <div class=\"rating-items\">\n                                <input type=\"radio\" class=\"reting-item\" value=\"1\" name=\"rating\"></>\n                                <input type=\"radio\" class=\"reting-item\" value=\"2\" name=\"rating\"></>\n                                <input type=\"radio\" class=\"reting-item\" value=\"3\" name=\"rating\"></>\n                                <input type=\"radio\" class=\"reting-item\" value=\"4\" name=\"rating\"></>\n                                <input type=\"radio\" class=\"reting-item\" value=\"5\" name=\"rating\"></>\n                            </div>\n                            </div>\n                        </div>\n                    <div class=\"library-container-about\">\n                        <h3 class=\"library-movie-title\">${filmName}</h3>     \n                        <span class=\"library-genre-title\">${genreNames}</span><span class=\"library-genre-title\"> | ${release.slice(\n        0,\n        4\n      )}</span>   \n                    </div> \n            </div>\n            </div>\n        </div>`;\n    })\n    .join('');\n}\n\ninitCatalogFetch();\n\nexport function convertRatingToPercentage(rating) {\n  // Перетворюємо рейтинг у відсотки\n  const percentage = (rating / 10) * 100;\n\n  // Округлюємо значення до двох знаків після коми\n  const roundedPercentage = Math.round(percentage * 100) / 100;\n\n  return roundedPercentage;\n}\n"],"names":["$01039996e00cb7ba$var$trendData","$01039996e00cb7ba$var$genres","$bpxeT","parcelRequire","$01039996e00cb7ba$var$dayTrend","document","querySelector","$01039996e00cb7ba$var$paginationContainer","$01039996e00cb7ba$var$currentPage","$01039996e00cb7ba$var$_initCatalogFetch","$parcel$interopDefault","$2TvXO","mark","_callee","$hDMWd","trendMovieRequest","_ctx","sent","upcomingMovieGenreRequest","forEach","genre","id","name","console","log","results","$01039996e00cb7ba$var$renderCatalog","$01039996e00cb7ba$var$setupPagination","t0","apply","this","arguments","innerHTML","prevPageLink","nextPageLink","halfVisiblePages","Math","floor","maxVisiblePages","startPage","max","endPage","min","createElement","href","textContent","addEventListener","total_pages","appendChild","$01039996e00cb7ba$var$addPageLink","$01039996e00cb7ba$var$addEllipsis","i","totalPages","pageNumber","pageDiv","classList","add","pageLink","concat","toString","$01039996e00cb7ba$var$formatPageNumber","ellipsisSpan","arr","genres1","htmlMarkup","genres2","map","movie","filmName","release","rating","percentage","release_date","backdrop_path","genre_ids","title","vote_average","first_air_date","genreNames","slice","genreId","join","round","$01039996e00cb7ba$var$catalogTrendMarkup","insertAdjacentHTML","$01039996e00cb7ba$var$initCatalogFetch"],"version":3,"file":"catalog.899bda2c.js.map"}